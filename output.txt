

----------------------------------------------------------------------



import os
from log import Log
from dotenv import load_dotenv
load_dotenv()

class EnvVars:
    def __init__(self):
        self.owner = os.getenv('REPO_OWNER')
        self.repo = os.getenv('REPO_NAME')
        self.pull_number = os.getenv('PULL_NUMBER')
        
        self.token = os.getenv('GITHUB_TOKEN') 

        self.base_ref = os.getenv('GITHUB_BASE_REF') 
        self.head_ref = os.getenv('GITHUB_HEAD_REF') 

        self.chat_gpt_token = os.getenv('CHATGPT_KEY') 
        self.chat_gpt_model = os.getenv('CHATGPT_MODEL') 

        self.target_extensions = os.getenv('TARGET_EXTENSIONS')
        self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]

        if len(self.target_extensions) == 0:
            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")

        self.env_vars = {
            "owner" : self.owner,
            "repo" : self.repo,
            "token" : self.token,
            "base_ref" : self.base_ref,
            "pull_number" : self.pull_number,
            "chat_gpt_token" : self.chat_gpt_token,
            "chat_gpt_model" : self.chat_gpt_model,
        }

    def check_vars(self):
        missing_vars = [var for var, value in self.env_vars.items() if not value]
        if missing_vars:
            missing_vars_str = ", ".join(missing_vars)
            raise ValueError(f"The following environment variables are missing or empty: {missing_vars_str}")
        else:
            Log.print_green("All required environment variables are set.")
        

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/env_vars.py b/.ai/io/nerdythings/env_vars.py
index fb5dd1f..e6125ae 100644
--- a/.ai/io/nerdythings/env_vars.py
+++ b/.ai/io/nerdythings/env_vars.py
@@ -1,7 +1,14 @@
-
-
 import os
 from log import Log
+from dotenv import load_dotenv
+
+load_dotenv()
+
+
+# In thử giá trị
+print("GITHUB_TOKEN:", os.getenv("GITHUB_TOKEN"))
+print("CHATGPT_KEY:", os.getenv("CHATGPT_KEY"))
+print("CHATGPT_MODEL:", os.getenv("CHATGPT_MODEL"))
 
 class EnvVars:
     def __init__(self):
@@ -21,7 +28,8 @@ class EnvVars:
         self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]
 
         if len(self.target_extensions) == 0:
-            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")
+            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: ts,java,py,js,c. Only these files will be reviewed")
+      
 
         self.env_vars = {
             "owner" : self.owner,


----------------------------------------------------------------------

No  critical  issues  found .

----------------------------------------------------------------------



----------------------------------------------------------------------


import subprocess
from typing import List
from log import Log

class Git:

    @staticmethod
    def __run_subprocess(options):
        Log.print_green(options)
        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            Log.print_red(options)
            raise Exception(f"Error running {options}: {result.stderr}")

    @staticmethod
    def get_remote_name() -> str:
        command = ["git", "remote", "-v"]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0]

    @staticmethod
    def get_last_commit_sha(file) -> str:
        command = ["git", "log", "-1", "--format=\"%H\"", "--", file]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0].replace('"', "")
        
    @staticmethod
    def get_diff_files(remote_name, head_ref, base_ref) -> List[str]:
        command = ["git", "diff", "--name-only", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}"]
        result = Git.__run_subprocess(command)
        return result.strip().splitlines()
        
    @staticmethod
    def get_diff_in_file(remote_name, head_ref, base_ref, file_path) -> str:
        command = ["git", "diff", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}", "--", file_path]
        return Git.__run_subprocess(command)


----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/git.py b/.ai/io/nerdythings/git.py
index 0a6bbcb..c92680d 100644
--- a/.ai/io/nerdythings/git.py
+++ b/.ai/io/nerdythings/git.py
@@ -8,7 +8,7 @@ class Git:
     @staticmethod
     def __run_subprocess(options):
         Log.print_green(options)
-        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
+        result = subprocess.run(options, stdout=subprocess.PIPE, text=True, encoding="utf-8")
         if result.returncode == 0:
             return result.stdout
         else:


----------------------------------------------------------------------

No  critical  issues  found

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from git import Git 
from pathlib import Path
from ai.chat_gpt import ChatGPT
from ai.ai_bot import AiBot
from log import Log
from env_vars import EnvVars
from repository.github import GitHub
from repository.repository import RepositoryError

separator = "\n\n----------------------------------------------------------------------\n\n"
log_file = open('output.txt', 'a')

def main():
    vars = EnvVars()
    vars.check_vars()

    ai = ChatGPT(vars.chat_gpt_token, vars.chat_gpt_model)
    github = GitHub(vars.token, vars.owner, vars.repo, vars.pull_number)

    remote_name = Git.get_remote_name()
    
    Log.print_green("Remote is", remote_name)
    changed_files = Git.get_diff_files(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref)
    Log.print_green("Found changes in files", changed_files)
    if len(changed_files) == 0: 
        Log.print_red("No changes between branch")

    for file in changed_files:
        Log.print_green("Checking file", file)

        _, file_extension = os.path.splitext(file)
        file_extension = file_extension.lstrip('.')
        if file_extension not in vars.target_extensions:
            Log.print_yellow(f"Skipping, unsuported extension {file_extension} file {file}")
            continue

        try:
            with open(file, 'r') as file_opened:
                file_content = file_opened.read()
        except FileNotFoundError:
            Log.print_yellow("File was removed. Continue.", file)
            continue

        if len( file_content ) == 0: 
            Log.print_red("File is empty")
            continue

        file_diffs = Git.get_diff_in_file(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref, file_path=file)
        if len( file_diffs ) == 0: 
            Log.print_red("Diffs are empty")
        
        Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
        response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)

        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")

        if AiBot.is_no_issues_text(response):
            Log.print_green("File looks good. Continue", file)
        else:
            responses = AiBot.split_ai_response(response)
            if len(responses) == 0:
                Log.print_red("Responses where not parsed:", responses)

            result = False
            for response in responses:
                if response.line:
                    result = post_line_comment(github=github, file=file, text=response.text, line=response.line)
                if not result:
                    result = post_general_comment(github=github, file=file, text=response.text)
                if not result:
                    raise RepositoryError("Failed to post any comments.")
                    
def post_line_comment(github: GitHub, file: str, text:str, line: int):
    Log.print_green("Posting line", file, line, text)
    try:
        git_response = github.post_comment_to_line(
            text=text, 
            commit_id=Git.get_last_commit_sha(file=file), 
            file_path=file, 
            line=line,
        )
        Log.print_yellow("Posted", git_response)
        return True
    except RepositoryError as e:
        Log.print_red("Failed line comment", e)
        return False

def post_general_comment(github: GitHub, file: str, text:str) -> bool:
    Log.print_green("Posting general", file, text)
    try:
        message = f"{file}\n{text}"
        git_response = github.post_comment_general(message)
        Log.print_yellow("Posted general", git_response)
        return True
    except RepositoryError:
        Log.print_red("Failed general comment")
        return False

if __name__ == "__main__":
    main()

log_file.close()

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/github_reviewer.py b/.ai/io/nerdythings/github_reviewer.py
index 87142b6..0e6d288 100644
--- a/.ai/io/nerdythings/github_reviewer.py
+++ b/.ai/io/nerdythings/github_reviewer.py
@@ -55,7 +55,9 @@ def main():
         Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
         response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)
 
-        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+        with open("log.txt", "w", encoding="utf-8") as log_file:
+            log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+
 
         if AiBot.is_no_issues_text(response):
             Log.print_green("File looks good. Continue", file)


----------------------------------------------------------------------

No  critical  issues  found

----------------------------------------------------------------------



----------------------------------------------------------------------

from fastapi import FastAPI
from pydantic import BaseModel
from transformers import T5Tokenizer, T5ForConditionalGeneration
from fastapi.middleware.cors import CORSMiddleware
import re

# Init app
app = FastAPI(title='Text Summarization System', description="Summarize dialogues with T5", version="1.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load model and tokenizer on CPU
model = T5ForConditionalGeneration.from_pretrained("phuckhang1908/T5_summary")
tokenizer = T5Tokenizer.from_pretrained("phuckhang1908/T5_summary")
model = model.to("cpu")

# Input schema for requests
class DialogueInput(BaseModel):
    dialogue: str

# Clean text function
def clean_text(text: str) -> str:
    text = re.sub(r'\r\n|\n', '\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'<.*?>', '', text)
    text = '\n'.join([line.strip() for line in text.split('\n') if line.strip()])
    return text.lower()

# Summarization function
def summarize_dialogue(dialogue: str) -> str:
    dialogue = clean_text(dialogue)
    inputs = tokenizer(dialogue, return_tensors="pt", truncation=True, padding="max_length", max_length=512)

    # Generate summary on CPU
    outputs = model.generate(
        inputs["input_ids"],
        max_length=150,
        num_beams=4,
        early_stopping=True
    )
    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

# API endpoint for text summarization
@app.post('/summarize/')
async def summarize(dialogue_input: DialogueInput):
    summary = summarize_(dialogue_input.dialogue)
    return {'summary': summary}


----------------------------------------------------------------------

diff --git a/app.py b/app.py
index 46f5aa8..679188c 100644
--- a/app.py
+++ b/app.py
@@ -49,6 +49,6 @@ def summarize_dialogue(dialogue: str) -> str:
 
 # API endpoint for text summarization
 @app.post('/summarize/')
-async def summarize(dialogue_input: DialogueInput):
-    summary = summarize_(dialogue_input.dialogue)
-    return {'summary': summary}
+def summarize(dialogue_input: DialogueInput):
+    summary = summarize_dialogue(dialogue_input.dialogue)
+    return {'summary-text': summary}


----------------------------------------------------------------------

52  :  Name Error  summarize _  is  not  defined

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from log import Log
from dotenv import load_dotenv
load_dotenv()

class EnvVars:
    def __init__(self):
        self.owner = os.getenv('REPO_OWNER')
        self.repo = os.getenv('REPO_NAME')
        self.pull_number = os.getenv('PULL_NUMBER')
        
        self.token = os.getenv('GITHUB_TOKEN') 

        self.base_ref = os.getenv('GITHUB_BASE_REF') 
        self.head_ref = os.getenv('GITHUB_HEAD_REF') 

        self.chat_gpt_token = os.getenv('CHATGPT_KEY') 
        self.chat_gpt_model = os.getenv('CHATGPT_MODEL') 

        self.target_extensions = os.getenv('TARGET_EXTENSIONS')
        self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]

        if len(self.target_extensions) == 0:
            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")

        self.env_vars = {
            "owner" : self.owner,
            "repo" : self.repo,
            "token" : self.token,
            "base_ref" : self.base_ref,
            "pull_number" : self.pull_number,
            "chat_gpt_token" : self.chat_gpt_token,
            "chat_gpt_model" : self.chat_gpt_model,
        }

    def check_vars(self):
        missing_vars = [var for var, value in self.env_vars.items() if not value]
        if missing_vars:
            missing_vars_str = ", ".join(missing_vars)
            raise ValueError(f"The following environment variables are missing or empty: {missing_vars_str}")
        else:
            Log.print_green("All required environment variables are set.")
        

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/env_vars.py b/.ai/io/nerdythings/env_vars.py
index fb5dd1f..e6125ae 100644
--- a/.ai/io/nerdythings/env_vars.py
+++ b/.ai/io/nerdythings/env_vars.py
@@ -1,7 +1,14 @@
-
-
 import os
 from log import Log
+from dotenv import load_dotenv
+
+load_dotenv()
+
+
+# In thử giá trị
+print("GITHUB_TOKEN:", os.getenv("GITHUB_TOKEN"))
+print("CHATGPT_KEY:", os.getenv("CHATGPT_KEY"))
+print("CHATGPT_MODEL:", os.getenv("CHATGPT_MODEL"))
 
 class EnvVars:
     def __init__(self):
@@ -21,7 +28,8 @@ class EnvVars:
         self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]
 
         if len(self.target_extensions) == 0:
-            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")
+            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: ts,java,py,js,c. Only these files will be reviewed")
+      
 
         self.env_vars = {
             "owner" : self.owner,


----------------------------------------------------------------------

No  critical  issues  found

----------------------------------------------------------------------



----------------------------------------------------------------------


import subprocess
from typing import List
from log import Log

class Git:

    @staticmethod
    def __run_subprocess(options):
        Log.print_green(options)
        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            Log.print_red(options)
            raise Exception(f"Error running {options}: {result.stderr}")

    @staticmethod
    def get_remote_name() -> str:
        command = ["git", "remote", "-v"]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0]

    @staticmethod
    def get_last_commit_sha(file) -> str:
        command = ["git", "log", "-1", "--format=\"%H\"", "--", file]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0].replace('"', "")
        
    @staticmethod
    def get_diff_files(remote_name, head_ref, base_ref) -> List[str]:
        command = ["git", "diff", "--name-only", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}"]
        result = Git.__run_subprocess(command)
        return result.strip().splitlines()
        
    @staticmethod
    def get_diff_in_file(remote_name, head_ref, base_ref, file_path) -> str:
        command = ["git", "diff", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}", "--", file_path]
        return Git.__run_subprocess(command)


----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/git.py b/.ai/io/nerdythings/git.py
index 0a6bbcb..c92680d 100644
--- a/.ai/io/nerdythings/git.py
+++ b/.ai/io/nerdythings/git.py
@@ -8,7 +8,7 @@ class Git:
     @staticmethod
     def __run_subprocess(options):
         Log.print_green(options)
-        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
+        result = subprocess.run(options, stdout=subprocess.PIPE, text=True, encoding="utf-8")
         if result.returncode == 0:
             return result.stdout
         else:


----------------------------------------------------------------------

No  critical  issues  found

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from git import Git 
from pathlib import Path
from ai.chat_gpt import ChatGPT
from ai.ai_bot import AiBot
from log import Log
from env_vars import EnvVars
from repository.github import GitHub
from repository.repository import RepositoryError

separator = "\n\n----------------------------------------------------------------------\n\n"
log_file = open('output.txt', 'a')

def main():
    vars = EnvVars()
    vars.check_vars()

    ai = ChatGPT(vars.chat_gpt_token, vars.chat_gpt_model)
    github = GitHub(vars.token, vars.owner, vars.repo, vars.pull_number)

    remote_name = Git.get_remote_name()
    
    Log.print_green("Remote is", remote_name)
    changed_files = Git.get_diff_files(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref)
    Log.print_green("Found changes in files", changed_files)
    if len(changed_files) == 0: 
        Log.print_red("No changes between branch")

    for file in changed_files:
        Log.print_green("Checking file", file)

        _, file_extension = os.path.splitext(file)
        file_extension = file_extension.lstrip('.')
        if file_extension not in vars.target_extensions:
            Log.print_yellow(f"Skipping, unsuported extension {file_extension} file {file}")
            continue

        try:
            with open(file, 'r') as file_opened:
                file_content = file_opened.read()
        except FileNotFoundError:
            Log.print_yellow("File was removed. Continue.", file)
            continue

        if len( file_content ) == 0: 
            Log.print_red("File is empty")
            continue

        file_diffs = Git.get_diff_in_file(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref, file_path=file)
        if len( file_diffs ) == 0: 
            Log.print_red("Diffs are empty")
        
        Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
        response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)

        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")

        if AiBot.is_no_issues_text(response):
            Log.print_green("File looks good. Continue", file)
        else:
            responses = AiBot.split_ai_response(response)
            if len(responses) == 0:
                Log.print_red("Responses where not parsed:", responses)

            result = False
            for response in responses:
                if response.line:
                    result = post_line_comment(github=github, file=file, text=response.text, line=response.line)
                if not result:
                    result = post_general_comment(github=github, file=file, text=response.text)
                if not result:
                    raise RepositoryError("Failed to post any comments.")
                    
def post_line_comment(github: GitHub, file: str, text:str, line: int):
    Log.print_green("Posting line", file, line, text)
    try:
        git_response = github.post_comment_to_line(
            text=text, 
            commit_id=Git.get_last_commit_sha(file=file), 
            file_path=file, 
            line=line,
        )
        Log.print_yellow("Posted", git_response)
        return True
    except RepositoryError as e:
        Log.print_red("Failed line comment", e)
        return False

def post_general_comment(github: GitHub, file: str, text:str) -> bool:
    Log.print_green("Posting general", file, text)
    try:
        message = f"{file}\n{text}"
        git_response = github.post_comment_general(message)
        Log.print_yellow("Posted general", git_response)
        return True
    except RepositoryError:
        Log.print_red("Failed general comment")
        return False

if __name__ == "__main__":
    main()

log_file.close()

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/github_reviewer.py b/.ai/io/nerdythings/github_reviewer.py
index 87142b6..0e6d288 100644
--- a/.ai/io/nerdythings/github_reviewer.py
+++ b/.ai/io/nerdythings/github_reviewer.py
@@ -55,7 +55,9 @@ def main():
         Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
         response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)
 
-        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+        with open("log.txt", "w", encoding="utf-8") as log_file:
+            log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+
 
         if AiBot.is_no_issues_text(response):
             Log.print_green("File looks good. Continue", file)


----------------------------------------------------------------------

No  critical  issues  found .

----------------------------------------------------------------------



----------------------------------------------------------------------

from fastapi import FastAPI
from pydantic import BaseModel
from transformers import T5Tokenizer, T5ForConditionalGeneration
from fastapi.middleware.cors import CORSMiddleware
import re

# Init app
app = FastAPI(title='Text Summarization System', description="Summarize dialogues with T5", version="1.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load model and tokenizer on CPU
model = T5ForConditionalGeneration.from_pretrained("phuckhang1908/T5_summary")
tokenizer = T5Tokenizer.from_pretrained("phuckhang1908/T5_summary")
model = model.to("cpu")

# Input schema for requests
class DialogueInput(BaseModel):
    dialogue: str

# Clean text function
def clean_text(text: str) -> str:
    text = re.sub(r'\r\n|\n', '\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'<.*?>', '', text)
    text = '\n'.join([line.strip() for line in text.split('\n') if line.strip()])
    return text.lower()

# Summarization function
def summarize_dialogue(dialogue: str) -> str:
    dialogue = clean_text(dialogue)
    inputs = tokenizer(dialogue, return_tensors="pt", truncation=True, padding="max_length", max_length=512)

    # Generate summary on CPU
    outputs = model.generate(
        inputs["input_ids"],
        max_length=150,
        num_beams=4,
        early_stopping=True
    )
    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

# API endpoint for text summarization
@app.post('/summarize/')
async def summarize(dialogue_input: DialogueInput):
    summary = summarize_(dialogue_input.dialogue)
    return {'summary': summary}


----------------------------------------------------------------------

diff --git a/app.py b/app.py
index 46f5aa8..679188c 100644
--- a/app.py
+++ b/app.py
@@ -49,6 +49,6 @@ def summarize_dialogue(dialogue: str) -> str:
 
 # API endpoint for text summarization
 @app.post('/summarize/')
-async def summarize(dialogue_input: DialogueInput):
-    summary = summarize_(dialogue_input.dialogue)
-    return {'summary': summary}
+def summarize(dialogue_input: DialogueInput):
+    summary = summarize_dialogue(dialogue_input.dialogue)
+    return {'summary-text': summary}


----------------------------------------------------------------------

22 :  summary  variable  is  assigned  to  summarize _dialog ue  function  output ,  but  summarize _  function  is  called  instead .  This  will  cause  a  Name Error ,  as  summarize _  is  not  defined .

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from log import Log
from dotenv import load_dotenv
load_dotenv()

class EnvVars:
    def __init__(self):
        self.owner = os.getenv('REPO_OWNER')
        self.repo = os.getenv('REPO_NAME')
        self.pull_number = os.getenv('PULL_NUMBER')
        
        self.token = os.getenv('GITHUB_TOKEN') 

        self.base_ref = os.getenv('GITHUB_BASE_REF') 
        self.head_ref = os.getenv('GITHUB_HEAD_REF') 

        self.chat_gpt_token = os.getenv('CHATGPT_KEY') 
        self.chat_gpt_model = os.getenv('CHATGPT_MODEL') 

        self.target_extensions = os.getenv('TARGET_EXTENSIONS')
        self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]

        if len(self.target_extensions) == 0:
            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")

        self.env_vars = {
            "owner" : self.owner,
            "repo" : self.repo,
            "token" : self.token,
            "base_ref" : self.base_ref,
            "pull_number" : self.pull_number,
            "chat_gpt_token" : self.chat_gpt_token,
            "chat_gpt_model" : self.chat_gpt_model,
        }

    def check_vars(self):
        missing_vars = [var for var, value in self.env_vars.items() if not value]
        if missing_vars:
            missing_vars_str = ", ".join(missing_vars)
            raise ValueError(f"The following environment variables are missing or empty: {missing_vars_str}")
        else:
            Log.print_green("All required environment variables are set.")
        

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/env_vars.py b/.ai/io/nerdythings/env_vars.py
index fb5dd1f..e6125ae 100644
--- a/.ai/io/nerdythings/env_vars.py
+++ b/.ai/io/nerdythings/env_vars.py
@@ -1,7 +1,14 @@
-
-
 import os
 from log import Log
+from dotenv import load_dotenv
+
+load_dotenv()
+
+
+# In thử giá trị
+print("GITHUB_TOKEN:", os.getenv("GITHUB_TOKEN"))
+print("CHATGPT_KEY:", os.getenv("CHATGPT_KEY"))
+print("CHATGPT_MODEL:", os.getenv("CHATGPT_MODEL"))
 
 class EnvVars:
     def __init__(self):
@@ -21,7 +28,8 @@ class EnvVars:
         self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]
 
         if len(self.target_extensions) == 0:
-            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")
+            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: ts,java,py,js,c. Only these files will be reviewed")
+      
 
         self.env_vars = {
             "owner" : self.owner,


----------------------------------------------------------------------

No  critical  issues  found .

----------------------------------------------------------------------



----------------------------------------------------------------------


import subprocess
from typing import List
from log import Log

class Git:

    @staticmethod
    def __run_subprocess(options):
        Log.print_green(options)
        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            Log.print_red(options)
            raise Exception(f"Error running {options}: {result.stderr}")

    @staticmethod
    def get_remote_name() -> str:
        command = ["git", "remote", "-v"]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0]

    @staticmethod
    def get_last_commit_sha(file) -> str:
        command = ["git", "log", "-1", "--format=\"%H\"", "--", file]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0].replace('"', "")
        
    @staticmethod
    def get_diff_files(remote_name, head_ref, base_ref) -> List[str]:
        command = ["git", "diff", "--name-only", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}"]
        result = Git.__run_subprocess(command)
        return result.strip().splitlines()
        
    @staticmethod
    def get_diff_in_file(remote_name, head_ref, base_ref, file_path) -> str:
        command = ["git", "diff", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}", "--", file_path]
        return Git.__run_subprocess(command)


----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/git.py b/.ai/io/nerdythings/git.py
index 0a6bbcb..c92680d 100644
--- a/.ai/io/nerdythings/git.py
+++ b/.ai/io/nerdythings/git.py
@@ -8,7 +8,7 @@ class Git:
     @staticmethod
     def __run_subprocess(options):
         Log.print_green(options)
-        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
+        result = subprocess.run(options, stdout=subprocess.PIPE, text=True, encoding="utf-8")
         if result.returncode == 0:
             return result.stdout
         else:


----------------------------------------------------------------------

No  critical  issues  found

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from git import Git 
from pathlib import Path
from ai.chat_gpt import ChatGPT
from ai.ai_bot import AiBot
from log import Log
from env_vars import EnvVars
from repository.github import GitHub
from repository.repository import RepositoryError

separator = "\n\n----------------------------------------------------------------------\n\n"
log_file = open('output.txt', 'a')

def main():
    vars = EnvVars()
    vars.check_vars()

    ai = ChatGPT(vars.chat_gpt_token, vars.chat_gpt_model)
    github = GitHub(vars.token, vars.owner, vars.repo, vars.pull_number)

    remote_name = Git.get_remote_name()
    
    Log.print_green("Remote is", remote_name)
    changed_files = Git.get_diff_files(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref)
    Log.print_green("Found changes in files", changed_files)
    if len(changed_files) == 0: 
        Log.print_red("No changes between branch")

    for file in changed_files:
        Log.print_green("Checking file", file)

        _, file_extension = os.path.splitext(file)
        file_extension = file_extension.lstrip('.')
        if file_extension not in vars.target_extensions:
            Log.print_yellow(f"Skipping, unsuported extension {file_extension} file {file}")
            continue

        try:
            with open(file, 'r') as file_opened:
                file_content = file_opened.read()
        except FileNotFoundError:
            Log.print_yellow("File was removed. Continue.", file)
            continue

        if len( file_content ) == 0: 
            Log.print_red("File is empty")
            continue

        file_diffs = Git.get_diff_in_file(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref, file_path=file)
        if len( file_diffs ) == 0: 
            Log.print_red("Diffs are empty")
        
        Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
        response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)

        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")

        if AiBot.is_no_issues_text(response):
            Log.print_green("File looks good. Continue", file)
        else:
            responses = AiBot.split_ai_response(response)
            if len(responses) == 0:
                Log.print_red("Responses where not parsed:", responses)

            result = False
            for response in responses:
                if response.line:
                    result = post_line_comment(github=github, file=file, text=response.text, line=response.line)
                if not result:
                    result = post_general_comment(github=github, file=file, text=response.text)
                if not result:
                    raise RepositoryError("Failed to post any comments.")
                    
def post_line_comment(github: GitHub, file: str, text:str, line: int):
    Log.print_green("Posting line", file, line, text)
    try:
        git_response = github.post_comment_to_line(
            text=text, 
            commit_id=Git.get_last_commit_sha(file=file), 
            file_path=file, 
            line=line,
        )
        Log.print_yellow("Posted", git_response)
        return True
    except RepositoryError as e:
        Log.print_red("Failed line comment", e)
        return False

def post_general_comment(github: GitHub, file: str, text:str) -> bool:
    Log.print_green("Posting general", file, text)
    try:
        message = f"{file}\n{text}"
        git_response = github.post_comment_general(message)
        Log.print_yellow("Posted general", git_response)
        return True
    except RepositoryError:
        Log.print_red("Failed general comment")
        return False

if __name__ == "__main__":
    main()

log_file.close()

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/github_reviewer.py b/.ai/io/nerdythings/github_reviewer.py
index 87142b6..0e6d288 100644
--- a/.ai/io/nerdythings/github_reviewer.py
+++ b/.ai/io/nerdythings/github_reviewer.py
@@ -55,7 +55,9 @@ def main():
         Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
         response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)
 
-        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+        with open("log.txt", "w", encoding="utf-8") as log_file:
+            log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+
 
         if AiBot.is_no_issues_text(response):
             Log.print_green("File looks good. Continue", file)


----------------------------------------------------------------------

No  critical  issues  found .

----------------------------------------------------------------------



----------------------------------------------------------------------

from fastapi import FastAPI
from pydantic import BaseModel
from transformers import T5Tokenizer, T5ForConditionalGeneration
from fastapi.middleware.cors import CORSMiddleware
import re

# Init app
app = FastAPI(title='Text Summarization System', description="Summarize dialogues with T5", version="1.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load model and tokenizer on CPU
model = T5ForConditionalGeneration.from_pretrained("phuckhang1908/T5_summary")
tokenizer = T5Tokenizer.from_pretrained("phuckhang1908/T5_summary")
model = model.to("cpu")

# Input schema for requests
class DialogueInput(BaseModel):
    dialogue: str

# Clean text function
def clean_text(text: str) -> str:
    text = re.sub(r'\r\n|\n', '\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'<.*?>', '', text)
    text = '\n'.join([line.strip() for line in text.split('\n') if line.strip()])
    return text.lower()

# Summarization function
def summarize_dialogue(dialogue: str) -> str:
    dialogue = clean_text(dialogue)
    inputs = tokenizer(dialogue, return_tensors="pt", truncation=True, padding="max_length", max_length=512)

    # Generate summary on CPU
    outputs = model.generate(
        inputs["input_ids"],
        max_length=150,
        num_beams=4,
        early_stopping=True
    )
    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

# API endpoint for text summarization
@app.post('/summarize/')
async def summarize(dialogue_input: DialogueInput):
    summary = summarize_dialogue(dialogue_input.dialogue)
    return {'summary': summary}


----------------------------------------------------------------------

diff --git a/app.py b/app.py
index 46f5aa8..679188c 100644
--- a/app.py
+++ b/app.py
@@ -49,6 +49,6 @@ def summarize_dialogue(dialogue: str) -> str:
 
 # API endpoint for text summarization
 @app.post('/summarize/')
-async def summarize(dialogue_input: DialogueInput):
-    summary = summarize_(dialogue_input.dialogue)
-    return {'summary': summary}
+def summarize(dialogue_input: DialogueInput):
+    summary = summarize_dialogue(dialogue_input.dialogue)
+    return {'summary-text': summary}


----------------------------------------------------------------------

No  critical  issues  found .

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from log import Log
from dotenv import load_dotenv
load_dotenv()

class EnvVars:
    def __init__(self):
        self.owner = os.getenv('REPO_OWNER')
        self.repo = os.getenv('REPO_NAME')
        self.pull_number = os.getenv('PULL_NUMBER')
        
        self.token = os.getenv('GITHUB_TOKEN') 

        self.base_ref = os.getenv('GITHUB_BASE_REF') 
        self.head_ref = os.getenv('GITHUB_HEAD_REF') 

        self.chat_gpt_token = os.getenv('CHATGPT_KEY') 
        self.chat_gpt_model = os.getenv('CHATGPT_MODEL') 

        self.target_extensions = os.getenv('TARGET_EXTENSIONS')
        self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]

        if len(self.target_extensions) == 0:
            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")

        self.env_vars = {
            "owner" : self.owner,
            "repo" : self.repo,
            "token" : self.token,
            "base_ref" : self.base_ref,
            "pull_number" : self.pull_number,
            "chat_gpt_token" : self.chat_gpt_token,
            "chat_gpt_model" : self.chat_gpt_model,
        }

    def check_vars(self):
        missing_vars = [var for var, value in self.env_vars.items() if not value]
        if missing_vars:
            missing_vars_str = ", ".join(missing_vars)
            raise ValueError(f"The following environment variables are missing or empty: {missing_vars_str}")
        else:
            Log.print_green("All required environment variables are set.")
        

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/env_vars.py b/.ai/io/nerdythings/env_vars.py
index fb5dd1f..e6125ae 100644
--- a/.ai/io/nerdythings/env_vars.py
+++ b/.ai/io/nerdythings/env_vars.py
@@ -1,7 +1,14 @@
-
-
 import os
 from log import Log
+from dotenv import load_dotenv
+
+load_dotenv()
+
+
+# In thử giá trị
+print("GITHUB_TOKEN:", os.getenv("GITHUB_TOKEN"))
+print("CHATGPT_KEY:", os.getenv("CHATGPT_KEY"))
+print("CHATGPT_MODEL:", os.getenv("CHATGPT_MODEL"))
 
 class EnvVars:
     def __init__(self):
@@ -21,7 +28,8 @@ class EnvVars:
         self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]
 
         if len(self.target_extensions) == 0:
-            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")
+            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: ts,java,py,js,c. Only these files will be reviewed")
+      
 
         self.env_vars = {
             "owner" : self.owner,


----------------------------------------------------------------------

No  critical  issues  found .

----------------------------------------------------------------------



----------------------------------------------------------------------


import subprocess
from typing import List
from log import Log

class Git:

    @staticmethod
    def __run_subprocess(options):
        Log.print_green(options)
        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            Log.print_red(options)
            raise Exception(f"Error running {options}: {result.stderr}")

    @staticmethod
    def get_remote_name() -> str:
        command = ["git", "remote", "-v"]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0]

    @staticmethod
    def get_last_commit_sha(file) -> str:
        command = ["git", "log", "-1", "--format=\"%H\"", "--", file]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0].replace('"', "")
        
    @staticmethod
    def get_diff_files(remote_name, head_ref, base_ref) -> List[str]:
        command = ["git", "diff", "--name-only", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}"]
        result = Git.__run_subprocess(command)
        return result.strip().splitlines()
        
    @staticmethod
    def get_diff_in_file(remote_name, head_ref, base_ref, file_path) -> str:
        command = ["git", "diff", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}", "--", file_path]
        return Git.__run_subprocess(command)


----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/git.py b/.ai/io/nerdythings/git.py
index 0a6bbcb..c92680d 100644
--- a/.ai/io/nerdythings/git.py
+++ b/.ai/io/nerdythings/git.py
@@ -8,7 +8,7 @@ class Git:
     @staticmethod
     def __run_subprocess(options):
         Log.print_green(options)
-        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
+        result = subprocess.run(options, stdout=subprocess.PIPE, text=True, encoding="utf-8")
         if result.returncode == 0:
             return result.stdout
         else:


----------------------------------------------------------------------

No  critical  issues  found

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from git import Git 
from pathlib import Path
from ai.chat_gpt import ChatGPT
from ai.ai_bot import AiBot
from log import Log
from env_vars import EnvVars
from repository.github import GitHub
from repository.repository import RepositoryError

separator = "\n\n----------------------------------------------------------------------\n\n"
log_file = open('output.txt', 'a')

def main():
    vars = EnvVars()
    vars.check_vars()

    ai = ChatGPT(vars.chat_gpt_token, vars.chat_gpt_model)
    github = GitHub(vars.token, vars.owner, vars.repo, vars.pull_number)

    remote_name = Git.get_remote_name()
    
    Log.print_green("Remote is", remote_name)
    changed_files = Git.get_diff_files(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref)
    Log.print_green("Found changes in files", changed_files)
    if len(changed_files) == 0: 
        Log.print_red("No changes between branch")

    for file in changed_files:
        Log.print_green("Checking file", file)

        _, file_extension = os.path.splitext(file)
        file_extension = file_extension.lstrip('.')
        if file_extension not in vars.target_extensions:
            Log.print_yellow(f"Skipping, unsuported extension {file_extension} file {file}")
            continue

        try:
            with open(file, 'r') as file_opened:
                file_content = file_opened.read()
        except FileNotFoundError:
            Log.print_yellow("File was removed. Continue.", file)
            continue

        if len( file_content ) == 0: 
            Log.print_red("File is empty")
            continue

        file_diffs = Git.get_diff_in_file(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref, file_path=file)
        if len( file_diffs ) == 0: 
            Log.print_red("Diffs are empty")
        
        Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
        response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)

        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")

        if AiBot.is_no_issues_text(response):
            Log.print_green("File looks good. Continue", file)
        else:
            responses = AiBot.split_ai_response(response)
            if len(responses) == 0:
                Log.print_red("Responses where not parsed:", responses)

            result = False
            for response in responses:
                if response.line:
                    result = post_line_comment(github=github, file=file, text=response.text, line=response.line)
                if not result:
                    result = post_general_comment(github=github, file=file, text=response.text)
                if not result:
                    raise RepositoryError("Failed to post any comments.")
                    
def post_line_comment(github: GitHub, file: str, text:str, line: int):
    Log.print_green("Posting line", file, line, text)
    try:
        git_response = github.post_comment_to_line(
            text=text, 
            commit_id=Git.get_last_commit_sha(file=file), 
            file_path=file, 
            line=line,
        )
        Log.print_yellow("Posted", git_response)
        return True
    except RepositoryError as e:
        Log.print_red("Failed line comment", e)
        return False

def post_general_comment(github: GitHub, file: str, text:str) -> bool:
    Log.print_green("Posting general", file, text)
    try:
        message = f"{file}\n{text}"
        git_response = github.post_comment_general(message)
        Log.print_yellow("Posted general", git_response)
        return True
    except RepositoryError:
        Log.print_red("Failed general comment")
        return False

if __name__ == "__main__":
    main()

log_file.close()

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/github_reviewer.py b/.ai/io/nerdythings/github_reviewer.py
index 87142b6..0e6d288 100644
--- a/.ai/io/nerdythings/github_reviewer.py
+++ b/.ai/io/nerdythings/github_reviewer.py
@@ -55,7 +55,9 @@ def main():
         Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
         response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)
 
-        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+        with open("log.txt", "w", encoding="utf-8") as log_file:
+            log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+
 
         if AiBot.is_no_issues_text(response):
             Log.print_green("File looks good. Continue", file)


----------------------------------------------------------------------

No  critical  issues  found

----------------------------------------------------------------------



----------------------------------------------------------------------

from fastapi import FastAPI
from pydantic import BaseModel
from transformers import T5Tokenizer, T5ForConditionalGeneration
from fastapi.middleware.cors import CORSMiddleware
import re

# Init app
app = FastAPI(title='Text Summarization System', description="Summarize dialogues with T5", version="1.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load model and tokenizer on CPU
model = T5ForConditionalGeneration.from_pretrained("phuckhang1908/T5_summary")
tokenizer = T5Tokenizer.from_pretrained("phuckhang1908/T5_summary")
model = model.to("cpu")

# Input schema for requests
class DialogueInput(BaseModel):
    dialogue: str

# Clean text function
def clean_text(text: str) -> str:
    text = re.sub(r'\r\n|\n', '\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'<.*?>', '', text)
    text = '\n'.join([line.strip() for line in text.split('\n') if line.strip()])
    return text.lower()

# Summarization function
def summarize_dialogue(dialogue: str) -> str:
    dialogue = clean_text(dialogue)
    inputs = tokenizer(dialogue, return_tensors="pt", truncation=True, padding="max_length", max_length=512)

    # Generate summary on CPU
    outputs = model.generate(
        inputs["input_ids"],
        max_length=150,
        num_beams=4,
        early_stopping=True
    )
    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

# API endpoint for text summarization
@app.post('/summarize/')
async def summarize(dialogue_input: DialogueInput):
    summary = summarize_dialogue(dialogue_input.dialogue)
    return {'summary': summary}


----------------------------------------------------------------------

diff --git a/app.py b/app.py
index 46f5aa8..679188c 100644
--- a/app.py
+++ b/app.py
@@ -49,6 +49,6 @@ def summarize_dialogue(dialogue: str) -> str:
 
 # API endpoint for text summarization
 @app.post('/summarize/')
-async def summarize(dialogue_input: DialogueInput):
-    summary = summarize_(dialogue_input.dialogue)
-    return {'summary': summary}
+def summarize(dialogue_input: DialogueInput):
+    summary = summarize_dialogue(dialogue_input.dialogue)
+    return {'summary-text': summary}


----------------------------------------------------------------------

No  critical  issues  found

----------------------------------------------------------------------



----------------------------------------------------------------------



from abc import ABC, abstractmethod
from ai.line_comment import LineComment

class AiBot(ABC):
    
    __no_response = "No critical issues found"
    __problems="errors, issues, potential crashes or unhandled exceptions"
    __chat_gpt_ask_long = """
        You are an AI code reviewer. Your task is to analyze the provided code changes (Git diffs) and full source code of a file, then identify **all potential issues** including but not limited to:
        - **Syntax Errors**: Any incorrect syntax that would cause compilation or runtime failure.
        - **Security Vulnerabilities**: Possible security flaws such as SQL injection, command injection, hardcoded secrets, weak encryption, or improper input validation.
        - **Logical Errors**: Flaws in the code logic that might lead to incorrect results, unintended behavior, or unexpected crashes.
        - **Performance Issues**: Inefficient loops, redundant operations, memory leaks, or excessive resource consumption.
        - **Best Practices Violations**: Code that does not follow standard conventions, poor exception handling, or missing important comments/documentation.
        - **Concurrency and Thread Safety Issues**: Potential race conditions, deadlocks, or improper handling of asynchronous code.

        **Instructions:**
        - Review the Git diffs carefully and check how they modify the existing code.
        - Compare the changes against the full source code to determine their impact.
        - Identify any issues that could arise from the new changes.
        - Do **not** add introductory or concluding statements.
        - Provide your findings in the following strict format:  
          ```
          line_number : [Type of Issue] Description of the issue and potential consequences.
          ```
          **Example output:**
          ```
          23 : [Security] SQL query is vulnerable to injection due to missing parameterized queries.
          45 : [Logic] Division by zero possible when variable `x` is zero.
          78 : [Performance] Unnecessary nested loop increases time complexity to O(n^2).
          ```

        If no issues are found, respond with exactly: "{no_response}".

        **Git Diffs:**
        ```
        {diffs}
        ```

        **Full Code:**
        ```
        {code}
        ```
    """


    @abstractmethod
    def ai_request_diffs(self, code, diffs) -> str:
        pass

    @staticmethod
    def build_ask_text(code, diffs) -> str:
        return AiBot.__chat_gpt_ask_long.format(
            problems = AiBot.__problems,
            no_response = AiBot.__no_response,
            diffs = diffs,
            code = code,
        )

    @staticmethod
    def is_no_issues_text(source: str) -> bool:
        target = AiBot.__no_response.replace(" ", "")
        source_no_spaces = source.replace(" ", "")
        return source_no_spaces.startswith(target)
    
    @staticmethod
    def split_ai_response(input) -> list[LineComment]:
        if input is None or not input:
            return []
        
        lines = input.strip().split("\n")
        models = []

        for full_text in lines:
            number_str = ''
            number = 0
            full_text = full_text.strip()
            if len( full_text ) == 0:
                continue

            reading_number = True
            for char in full_text.strip():
                if reading_number:
                    if char.isdigit():
                        number_str += char
                    else:
                        break

            if number_str:
                number = int(number_str)

            models.append(LineComment(line = number, text = full_text))
        return models
    

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/ai/ai_bot.py b/.ai/io/nerdythings/ai/ai_bot.py
index 09ab824..9f8f08c 100644
--- a/.ai/io/nerdythings/ai/ai_bot.py
+++ b/.ai/io/nerdythings/ai/ai_bot.py
@@ -7,44 +7,19 @@ class AiBot(ABC):
     
     __no_response = "No critical issues found"
     __problems="errors, issues, potential crashes or unhandled exceptions"
-    __chat_gpt_ask_long = """
-        You are an AI code reviewer. Your task is to analyze the provided code changes (Git diffs) and full source code of a file, then identify **all potential issues** including but not limited to:
-        - **Syntax Errors**: Any incorrect syntax that would cause compilation or runtime failure.
-        - **Security Vulnerabilities**: Possible security flaws such as SQL injection, command injection, hardcoded secrets, weak encryption, or improper input validation.
-        - **Logical Errors**: Flaws in the code logic that might lead to incorrect results, unintended behavior, or unexpected crashes.
-        - **Performance Issues**: Inefficient loops, redundant operations, memory leaks, or excessive resource consumption.
-        - **Best Practices Violations**: Code that does not follow standard conventions, poor exception handling, or missing important comments/documentation.
-        - **Concurrency and Thread Safety Issues**: Potential race conditions, deadlocks, or improper handling of asynchronous code.
+    __chat_gpt_ask_long="""
+Could you describe briefly {problems} for the next code with given git diffs? 
+Please, also, do not add intro words, just print errors in the format: "line_number : cause effect"
+If there are no {problems} just say "{no_response}".
 
-        **Instructions:**
-        - Review the Git diffs carefully and check how they modify the existing code.
-        - Compare the changes against the full source code to determine their impact.
-        - Identify any issues that could arise from the new changes.
-        - Do **not** add introductory or concluding statements.
-        - Provide your findings in the following strict format:  
-          ```
-          line_number : [Type of Issue] Description of the issue and potential consequences.
-          ```
-          **Example output:**
-          ```
-          23 : [Security] SQL query is vulnerable to injection due to missing parameterized queries.
-          45 : [Logic] Division by zero possible when variable `x` is zero.
-          78 : [Performance] Unnecessary nested loop increases time complexity to O(n^2).
-          ```
+DIFFS:
 
-        If no issues are found, respond with exactly: "{no_response}".
+{diffs}
 
-        **Git Diffs:**
-        ```
-        {diffs}
-        ```
-
-        **Full Code:**
-        ```
-        {code}
-        ```
-    """
+Full code from the file:
 
+{code}
+"""
 
     @abstractmethod
     def ai_request_diffs(self, code, diffs) -> str:


----------------------------------------------------------------------

`` `
 No  critical  issues  found 
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from log import Log
from dotenv import load_dotenv
load_dotenv()

class EnvVars:
    def __init__(self):
        self.owner = os.getenv('REPO_OWNER')
        self.repo = os.getenv('REPO_NAME')
        self.pull_number = os.getenv('PULL_NUMBER')
        
        self.token = os.getenv('GITHUB_TOKEN') 

        self.base_ref = os.getenv('GITHUB_BASE_REF') 
        self.head_ref = os.getenv('GITHUB_HEAD_REF') 

        self.chat_gpt_token = os.getenv('CHATGPT_KEY') 
        self.chat_gpt_model = os.getenv('CHATGPT_MODEL') 

        self.target_extensions = os.getenv('TARGET_EXTENSIONS')
        self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]

        if len(self.target_extensions) == 0:
            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")

        self.env_vars = {
            "owner" : self.owner,
            "repo" : self.repo,
            "token" : self.token,
            "base_ref" : self.base_ref,
            "pull_number" : self.pull_number,
            "chat_gpt_token" : self.chat_gpt_token,
            "chat_gpt_model" : self.chat_gpt_model,
        }

    def check_vars(self):
        missing_vars = [var for var, value in self.env_vars.items() if not value]
        if missing_vars:
            missing_vars_str = ", ".join(missing_vars)
            raise ValueError(f"The following environment variables are missing or empty: {missing_vars_str}")
        else:
            Log.print_green("All required environment variables are set.")
        

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/env_vars.py b/.ai/io/nerdythings/env_vars.py
index d22b9cc..e6125ae 100644
--- a/.ai/io/nerdythings/env_vars.py
+++ b/.ai/io/nerdythings/env_vars.py
@@ -1,10 +1,15 @@
-
-
 import os
 from log import Log
 from dotenv import load_dotenv
+
 load_dotenv()
 
+
+# In thử giá trị
+print("GITHUB_TOKEN:", os.getenv("GITHUB_TOKEN"))
+print("CHATGPT_KEY:", os.getenv("CHATGPT_KEY"))
+print("CHATGPT_MODEL:", os.getenv("CHATGPT_MODEL"))
+
 class EnvVars:
     def __init__(self):
         self.owner = os.getenv('REPO_OWNER')
@@ -23,7 +28,8 @@ class EnvVars:
         self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]
 
         if len(self.target_extensions) == 0:
-            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")
+            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: ts,java,py,js,c. Only these files will be reviewed")
+      
 
         self.env_vars = {
             "owner" : self.owner,


----------------------------------------------------------------------

`` `
 23  :  [ Logic ]  Modification  in  the  specified  TARGET _EXTENSIONS  values  from  ' kt , java , py , js , swift ,c ,h '  to  ' ts , java , py , js ,c '  in  the  Env Vars  class .
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------


import subprocess
from typing import List
from log import Log

class Git:

    @staticmethod
    def __run_subprocess(options):
        Log.print_green(options)
        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            Log.print_red(options)
            raise Exception(f"Error running {options}: {result.stderr}")

    @staticmethod
    def get_remote_name() -> str:
        command = ["git", "remote", "-v"]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0]

    @staticmethod
    def get_last_commit_sha(file) -> str:
        command = ["git", "log", "-1", "--format=\"%H\"", "--", file]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0].replace('"', "")
        
    @staticmethod
    def get_diff_files(remote_name, head_ref, base_ref) -> List[str]:
        command = ["git", "diff", "--name-only", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}"]
        result = Git.__run_subprocess(command)
        return result.strip().splitlines()
        
    @staticmethod
    def get_diff_in_file(remote_name, head_ref, base_ref, file_path) -> str:
        command = ["git", "diff", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}", "--", file_path]
        return Git.__run_subprocess(command)


----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/git.py b/.ai/io/nerdythings/git.py
index 0a6bbcb..c92680d 100644
--- a/.ai/io/nerdythings/git.py
+++ b/.ai/io/nerdythings/git.py
@@ -8,7 +8,7 @@ class Git:
     @staticmethod
     def __run_subprocess(options):
         Log.print_green(options)
-        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
+        result = subprocess.run(options, stdout=subprocess.PIPE, text=True, encoding="utf-8")
         if result.returncode == 0:
             return result.stdout
         else:


----------------------------------------------------------------------

`` `
 No  critical  issues  found 
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from git import Git 
from pathlib import Path
from ai.chat_gpt import ChatGPT
from ai.ai_bot import AiBot
from log import Log
from env_vars import EnvVars
from repository.github import GitHub
from repository.repository import RepositoryError

separator = "\n\n----------------------------------------------------------------------\n\n"
log_file = open('output.txt', 'a')

def main():
    vars = EnvVars()
    vars.check_vars()

    ai = ChatGPT(vars.chat_gpt_token, vars.chat_gpt_model)
    github = GitHub(vars.token, vars.owner, vars.repo, vars.pull_number)

    remote_name = Git.get_remote_name()
    
    Log.print_green("Remote is", remote_name)
    changed_files = Git.get_diff_files(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref)
    Log.print_green("Found changes in files", changed_files)
    if len(changed_files) == 0: 
        Log.print_red("No changes between branch")

    for file in changed_files:
        Log.print_green("Checking file", file)

        _, file_extension = os.path.splitext(file)
        file_extension = file_extension.lstrip('.')
        if file_extension not in vars.target_extensions:
            Log.print_yellow(f"Skipping, unsuported extension {file_extension} file {file}")
            continue

        try:
            with open(file, 'r') as file_opened:
                file_content = file_opened.read()
        except FileNotFoundError:
            Log.print_yellow("File was removed. Continue.", file)
            continue

        if len( file_content ) == 0: 
            Log.print_red("File is empty")
            continue

        file_diffs = Git.get_diff_in_file(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref, file_path=file)
        if len( file_diffs ) == 0: 
            Log.print_red("Diffs are empty")
        
        Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
        response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)

        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")

        if AiBot.is_no_issues_text(response):
            Log.print_green("File looks good. Continue", file)
        else:
            responses = AiBot.split_ai_response(response)
            if len(responses) == 0:
                Log.print_red("Responses where not parsed:", responses)

            result = False
            for response in responses:
                if response.line:
                    result = post_line_comment(github=github, file=file, text=response.text, line=response.line)
                if not result:
                    result = post_general_comment(github=github, file=file, text=response.text)
                if not result:
                    raise RepositoryError("Failed to post any comments.")
                    
def post_line_comment(github: GitHub, file: str, text:str, line: int):
    Log.print_green("Posting line", file, line, text)
    try:
        git_response = github.post_comment_to_line(
            text=text, 
            commit_id=Git.get_last_commit_sha(file=file), 
            file_path=file, 
            line=line,
        )
        Log.print_yellow("Posted", git_response)
        return True
    except RepositoryError as e:
        Log.print_red("Failed line comment", e)
        return False

def post_general_comment(github: GitHub, file: str, text:str) -> bool:
    Log.print_green("Posting general", file, text)
    try:
        message = f"{file}\n{text}"
        git_response = github.post_comment_general(message)
        Log.print_yellow("Posted general", git_response)
        return True
    except RepositoryError:
        Log.print_red("Failed general comment")
        return False

if __name__ == "__main__":
    main()

log_file.close()

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/github_reviewer.py b/.ai/io/nerdythings/github_reviewer.py
index 87142b6..0e6d288 100644
--- a/.ai/io/nerdythings/github_reviewer.py
+++ b/.ai/io/nerdythings/github_reviewer.py
@@ -55,7 +55,9 @@ def main():
         Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
         response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)
 
-        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+        with open("log.txt", "w", encoding="utf-8") as log_file:
+            log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+
 
         if AiBot.is_no_issues_text(response):
             Log.print_green("File looks good. Continue", file)


----------------------------------------------------------------------

`` `
 No  critical  issues  found 
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------

from fastapi import FastAPI
from pydantic import BaseModel
from transformers import T5Tokenizer, T5ForConditionalGeneration
from fastapi.middleware.cors import CORSMiddleware
import re

# Init app
app = FastAPI(title='Text Summarization System', description="Summarize dialogues with T5", version="1.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load model and tokenizer on CPU
model = T5ForConditionalGeneration.from_pretrained("phuckhang1908/T5_summary")
tokenizer = T5Tokenizer.from_pretrained("phuckhang1908/T5_summary")
model = model.to("cpu")

# Input schema for requests
class DialogueInput(BaseModel):
    dialogue: str

# Clean text function
def clean_text(text: str) -> str:
    text = re.sub(r'\r\n|\n', '\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'<.*?>', '', text)
    text = '\n'.join([line.strip() for line in text.split('\n') if line.strip()])
    return text.lower()

# Summarization function
def summarize_dialogue(dialogue: str) -> str:
    dialogue = clean_text(dialogue)
    inputs = tokenizer(dialogue, return_tensors="pt", truncation=True, padding="max_length", max_length=512)

    # Generate summary on CPU
    outputs = model.generate(
        inputs["input_ids"],
        max_length=150,
        num_beams=4,
        early_stopping=True
    )
    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

# API endpoint for text summarization
@app.post('/summarize/')
async def summarize(dialogue_input: DialogueInput):
    summary = summarize_dialogue(dialogue_input.dialogue)
    return {'summary': summary}


----------------------------------------------------------------------

diff --git a/app.py b/app.py
index cbbc04c..679188c 100644
--- a/app.py
+++ b/app.py
@@ -49,6 +49,6 @@ def summarize_dialogue(dialogue: str) -> str:
 
 # API endpoint for text summarization
 @app.post('/summarize/')
-async def summarize(dialogue_input: DialogueInput):
+def summarize(dialogue_input: DialogueInput):
     summary = summarize_dialogue(dialogue_input.dialogue)
-    return {'summary': summary}
+    return {'summary-text': summary}


----------------------------------------------------------------------

`` `
 49  :  [ Logic ]  The  API  endpoint  is  changed  from  returning  {' summary ':  summary }  to  {' summary -text ':  summary }.  This  may  impact  clients  expecting  a  different  response  structure .
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------



from abc import ABC, abstractmethod
from ai.line_comment import LineComment

class AiBot(ABC):
    
    __no_response = "No critical issues found"
    __problems="errors, issues, potential crashes or unhandled exceptions"
    __chat_gpt_ask_long = """
        You are an AI code reviewer. Your task is to analyze the provided code changes (Git diffs) and full source code of a file, then identify **all potential issues** including but not limited to:
        - **Syntax Errors**: Any incorrect syntax that would cause compilation or runtime failure.
        - **Security Vulnerabilities**: Possible security flaws such as SQL injection, command injection, hardcoded secrets, weak encryption, or improper input validation.
        - **Logical Errors**: Flaws in the code logic that might lead to incorrect results, unintended behavior, or unexpected crashes.
        - **Performance Issues**: Inefficient loops, redundant operations, memory leaks, or excessive resource consumption.
        - **Best Practices Violations**: Code that does not follow standard conventions, poor exception handling, or missing important comments/documentation.
        - **Concurrency and Thread Safety Issues**: Potential race conditions, deadlocks, or improper handling of asynchronous code.

        **Instructions:**
        - Review the Git diffs carefully and check how they modify the existing code.
        - Compare the changes against the full source code to determine their impact.
        - Identify any issues that could arise from the new changes.
        - Do **not** add introductory or concluding statements.
        - Provide your findings in the following strict format:  
          ```
          line_number : [Type of Issue] Description of the issue and potential consequences.
          ```
          **Example output:**
          ```
          23 : [Security] SQL query is vulnerable to injection due to missing parameterized queries.
          45 : [Logic] Division by zero possible when variable `x` is zero.
          78 : [Performance] Unnecessary nested loop increases time complexity to O(n^2).
          ```

        If no issues are found, respond with exactly: "{no_response}".

        **Git Diffs:**
        ```
        {diffs}
        ```

        **Full Code:**
        ```
        {code}
        ```
    """


    @abstractmethod
    def ai_request_diffs(self, code, diffs) -> str:
        pass

    @staticmethod
    def build_ask_text(code, diffs) -> str:
        return AiBot.__chat_gpt_ask_long.format(
            problems = AiBot.__problems,
            no_response = AiBot.__no_response,
            diffs = diffs,
            code = code,
        )

    @staticmethod
    def is_no_issues_text(source: str) -> bool:
        target = AiBot.__no_response.replace(" ", "")
        source_no_spaces = source.replace(" ", "")
        return source_no_spaces.startswith(target)
    
    @staticmethod
    def split_ai_response(input) -> list[LineComment]:
        if input is None or not input:
            return []
        
        lines = input.strip().split("\n")
        models = []

        for full_text in lines:
            number_str = ''
            number = 0
            full_text = full_text.strip()
            if len( full_text ) == 0:
                continue

            reading_number = True
            for char in full_text.strip():
                if reading_number:
                    if char.isdigit():
                        number_str += char
                    else:
                        break

            if number_str:
                number = int(number_str)

            models.append(LineComment(line = number, text = full_text))
        return models
    

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/ai/ai_bot.py b/.ai/io/nerdythings/ai/ai_bot.py
index 09ab824..9f8f08c 100644
--- a/.ai/io/nerdythings/ai/ai_bot.py
+++ b/.ai/io/nerdythings/ai/ai_bot.py
@@ -7,44 +7,19 @@ class AiBot(ABC):
     
     __no_response = "No critical issues found"
     __problems="errors, issues, potential crashes or unhandled exceptions"
-    __chat_gpt_ask_long = """
-        You are an AI code reviewer. Your task is to analyze the provided code changes (Git diffs) and full source code of a file, then identify **all potential issues** including but not limited to:
-        - **Syntax Errors**: Any incorrect syntax that would cause compilation or runtime failure.
-        - **Security Vulnerabilities**: Possible security flaws such as SQL injection, command injection, hardcoded secrets, weak encryption, or improper input validation.
-        - **Logical Errors**: Flaws in the code logic that might lead to incorrect results, unintended behavior, or unexpected crashes.
-        - **Performance Issues**: Inefficient loops, redundant operations, memory leaks, or excessive resource consumption.
-        - **Best Practices Violations**: Code that does not follow standard conventions, poor exception handling, or missing important comments/documentation.
-        - **Concurrency and Thread Safety Issues**: Potential race conditions, deadlocks, or improper handling of asynchronous code.
+    __chat_gpt_ask_long="""
+Could you describe briefly {problems} for the next code with given git diffs? 
+Please, also, do not add intro words, just print errors in the format: "line_number : cause effect"
+If there are no {problems} just say "{no_response}".
 
-        **Instructions:**
-        - Review the Git diffs carefully and check how they modify the existing code.
-        - Compare the changes against the full source code to determine their impact.
-        - Identify any issues that could arise from the new changes.
-        - Do **not** add introductory or concluding statements.
-        - Provide your findings in the following strict format:  
-          ```
-          line_number : [Type of Issue] Description of the issue and potential consequences.
-          ```
-          **Example output:**
-          ```
-          23 : [Security] SQL query is vulnerable to injection due to missing parameterized queries.
-          45 : [Logic] Division by zero possible when variable `x` is zero.
-          78 : [Performance] Unnecessary nested loop increases time complexity to O(n^2).
-          ```
+DIFFS:
 
-        If no issues are found, respond with exactly: "{no_response}".
+{diffs}
 
-        **Git Diffs:**
-        ```
-        {diffs}
-        ```
-
-        **Full Code:**
-        ```
-        {code}
-        ```
-    """
+Full code from the file:
 
+{code}
+"""
 
     @abstractmethod
     def ai_request_diffs(self, code, diffs) -> str:


----------------------------------------------------------------------

`` `
 No  critical  issues  found 
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from log import Log
from dotenv import load_dotenv
load_dotenv()

class EnvVars:
    def __init__(self):
        self.owner = os.getenv('REPO_OWNER')
        self.repo = os.getenv('REPO_NAME')
        self.pull_number = os.getenv('PULL_NUMBER')
        
        self.token = os.getenv('GITHUB_TOKEN') 

        self.base_ref = os.getenv('GITHUB_BASE_REF') 
        self.head_ref = os.getenv('GITHUB_HEAD_REF') 

        self.chat_gpt_token = os.getenv('CHATGPT_KEY') 
        self.chat_gpt_model = os.getenv('CHATGPT_MODEL') 

        self.target_extensions = os.getenv('TARGET_EXTENSIONS')
        self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]

        if len(self.target_extensions) == 0:
            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")

        self.env_vars = {
            "owner" : self.owner,
            "repo" : self.repo,
            "token" : self.token,
            "base_ref" : self.base_ref,
            "pull_number" : self.pull_number,
            "chat_gpt_token" : self.chat_gpt_token,
            "chat_gpt_model" : self.chat_gpt_model,
        }

    def check_vars(self):
        missing_vars = [var for var, value in self.env_vars.items() if not value]
        if missing_vars:
            missing_vars_str = ", ".join(missing_vars)
            raise ValueError(f"The following environment variables are missing or empty: {missing_vars_str}")
        else:
            Log.print_green("All required environment variables are set.")
        

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/env_vars.py b/.ai/io/nerdythings/env_vars.py
index d22b9cc..e6125ae 100644
--- a/.ai/io/nerdythings/env_vars.py
+++ b/.ai/io/nerdythings/env_vars.py
@@ -1,10 +1,15 @@
-
-
 import os
 from log import Log
 from dotenv import load_dotenv
+
 load_dotenv()
 
+
+# In thử giá trị
+print("GITHUB_TOKEN:", os.getenv("GITHUB_TOKEN"))
+print("CHATGPT_KEY:", os.getenv("CHATGPT_KEY"))
+print("CHATGPT_MODEL:", os.getenv("CHATGPT_MODEL"))
+
 class EnvVars:
     def __init__(self):
         self.owner = os.getenv('REPO_OWNER')
@@ -23,7 +28,8 @@ class EnvVars:
         self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]
 
         if len(self.target_extensions) == 0:
-            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")
+            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: ts,java,py,js,c. Only these files will be reviewed")
+      
 
         self.env_vars = {
             "owner" : self.owner,


----------------------------------------------------------------------

`` `
 23  :  [ Logic ]  The  updated  message  in  the  ValueError  now  specifies  different  file  extensions  ( ts , java , py , js ,c )  compared  to  the  previous  message  ( kt , java , py , js , swift ,c ,h ).  This  inconsistency  in  the  message  could  confuse  users  about  the  expected  file  extensions .
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------


import subprocess
from typing import List
from log import Log

class Git:

    @staticmethod
    def __run_subprocess(options):
        Log.print_green(options)
        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            Log.print_red(options)
            raise Exception(f"Error running {options}: {result.stderr}")

    @staticmethod
    def get_remote_name() -> str:
        command = ["git", "remote", "-v"]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0]

    @staticmethod
    def get_last_commit_sha(file) -> str:
        command = ["git", "log", "-1", "--format=\"%H\"", "--", file]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0].replace('"', "")
        
    @staticmethod
    def get_diff_files(remote_name, head_ref, base_ref) -> List[str]:
        command = ["git", "diff", "--name-only", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}"]
        result = Git.__run_subprocess(command)
        return result.strip().splitlines()
        
    @staticmethod
    def get_diff_in_file(remote_name, head_ref, base_ref, file_path) -> str:
        command = ["git", "diff", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}", "--", file_path]
        return Git.__run_subprocess(command)


----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/git.py b/.ai/io/nerdythings/git.py
index 0a6bbcb..c92680d 100644
--- a/.ai/io/nerdythings/git.py
+++ b/.ai/io/nerdythings/git.py
@@ -8,7 +8,7 @@ class Git:
     @staticmethod
     def __run_subprocess(options):
         Log.print_green(options)
-        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
+        result = subprocess.run(options, stdout=subprocess.PIPE, text=True, encoding="utf-8")
         if result.returncode == 0:
             return result.stdout
         else:


----------------------------------------------------------------------

`` `
 No  critical  issues  found 
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from git import Git 
from pathlib import Path
from ai.chat_gpt import ChatGPT
from ai.ai_bot import AiBot
from log import Log
from env_vars import EnvVars
from repository.github import GitHub
from repository.repository import RepositoryError

separator = "\n\n----------------------------------------------------------------------\n\n"
log_file = open('output.txt', 'a')

def main():
    vars = EnvVars()
    vars.check_vars()

    ai = ChatGPT(vars.chat_gpt_token, vars.chat_gpt_model)
    github = GitHub(vars.token, vars.owner, vars.repo, vars.pull_number)

    remote_name = Git.get_remote_name()
    
    Log.print_green("Remote is", remote_name)
    changed_files = Git.get_diff_files(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref)
    Log.print_green("Found changes in files", changed_files)
    if len(changed_files) == 0: 
        Log.print_red("No changes between branch")

    for file in changed_files:
        Log.print_green("Checking file", file)

        _, file_extension = os.path.splitext(file)
        file_extension = file_extension.lstrip('.')
        if file_extension not in vars.target_extensions:
            Log.print_yellow(f"Skipping, unsuported extension {file_extension} file {file}")
            continue

        try:
            with open(file, 'r') as file_opened:
                file_content = file_opened.read()
        except FileNotFoundError:
            Log.print_yellow("File was removed. Continue.", file)
            continue

        if len( file_content ) == 0: 
            Log.print_red("File is empty")
            continue

        file_diffs = Git.get_diff_in_file(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref, file_path=file)
        if len( file_diffs ) == 0: 
            Log.print_red("Diffs are empty")
        
        Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
        response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)

        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")

        if AiBot.is_no_issues_text(response):
            Log.print_green("File looks good. Continue", file)
        else:
            responses = AiBot.split_ai_response(response)
            if len(responses) == 0:
                Log.print_red("Responses where not parsed:", responses)

            result = False
            for response in responses:
                if response.line:
                    result = post_line_comment(github=github, file=file, text=response.text, line=response.line)
                if not result:
                    result = post_general_comment(github=github, file=file, text=response.text)
                if not result:
                    raise RepositoryError("Failed to post any comments.")
                    
def post_line_comment(github: GitHub, file: str, text:str, line: int):
    Log.print_green("Posting line", file, line, text)
    try:
        git_response = github.post_comment_to_line(
            text=text, 
            commit_id=Git.get_last_commit_sha(file=file), 
            file_path=file, 
            line=line,
        )
        Log.print_yellow("Posted", git_response)
        return True
    except RepositoryError as e:
        Log.print_red("Failed line comment", e)
        return False

def post_general_comment(github: GitHub, file: str, text:str) -> bool:
    Log.print_green("Posting general", file, text)
    try:
        message = f"{file}\n{text}"
        git_response = github.post_comment_general(message)
        Log.print_yellow("Posted general", git_response)
        return True
    except RepositoryError:
        Log.print_red("Failed general comment")
        return False

if __name__ == "__main__":
    main()

log_file.close()

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/github_reviewer.py b/.ai/io/nerdythings/github_reviewer.py
index 87142b6..0e6d288 100644
--- a/.ai/io/nerdythings/github_reviewer.py
+++ b/.ai/io/nerdythings/github_reviewer.py
@@ -55,7 +55,9 @@ def main():
         Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
         response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)
 
-        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+        with open("log.txt", "w", encoding="utf-8") as log_file:
+            log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+
 
         if AiBot.is_no_issues_text(response):
             Log.print_green("File looks good. Continue", file)


----------------------------------------------------------------------

`` `
 No  critical  issues  found 
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------

from fastapi import FastAPI
from pydantic import BaseModel
from transformers import T5Tokenizer, T5ForConditionalGeneration
from fastapi.middleware.cors import CORSMiddleware
import re

# Init app
app = FastAPI(title='Text Summarization System', description="Summarize dialogues with T5", version="1.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load model and tokenizer on CPU
model = T5ForConditionalGeneration.from_pretrained("phuckhang1908/T5_summary")
tokenizer = T5Tokenizer.from_pretrained("phuckhang1908/T5_summary")
model = model.to("cpu")

# Input schema for requests
class DialogueInput(BaseModel):
    dialogue: str

# Clean text function
def clean_text(text: str) -> str:
    text = re.sub(r'\r\n|\n', '\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'<.*?>', '', text)
    text = '\n'.join([line.strip() for line in text.split('\n') if line.strip()])
    return text.lower()

# Summarization function
def summarize_dialogue(dialogue: str) -> str:
    dialogue = clean_text(dialogue)
    inputs = tokenizer(dialogue, return_tensors="pt", truncation=True, padding="max_length", max_length=512)

    # Generate summary on CPU
    outputs = model.generate(
        inputs["input_ids"],
        max_length=150,
        num_beams=4,
        early_stopping=True
    )
    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

# API endpoint for text summarization
@app.post('/summarize/')
async def summarize(dialogue_input: DialogueInput):
    summary = summarize_dialogue(dialogue_input.dialogue)
    return {'summary': summary}


----------------------------------------------------------------------

diff --git a/app.py b/app.py
index cbbc04c..679188c 100644
--- a/app.py
+++ b/app.py
@@ -49,6 +49,6 @@ def summarize_dialogue(dialogue: str) -> str:
 
 # API endpoint for text summarization
 @app.post('/summarize/')
-async def summarize(dialogue_input: DialogueInput):
+def summarize(dialogue_input: DialogueInput):
     summary = summarize_dialogue(dialogue_input.dialogue)
-    return {'summary': summary}
+    return {'summary-text': summary}


----------------------------------------------------------------------

`` `
 49  :  [ Logic ]  The  key  in  the  returned  dictionary  from  the  ` sum mar ize `  endpoint  has  been  changed  from  ' summary '  to  ' summary -text '.  This  may  affect  clients  expecting  the  previous  key  for  parsing  the  response .
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------



from abc import ABC, abstractmethod
from ai.line_comment import LineComment

class AiBot(ABC):
    
    __no_response = "No critical issues found"
    __problems="errors, issues, potential crashes or unhandled exceptions"
    __chat_gpt_ask_long = """
        You are an AI code reviewer. Your task is to analyze the provided code changes (Git diffs) and full source code of a file, then identify **all potential issues** including but not limited to:
        - **Syntax Errors**: Any incorrect syntax that would cause compilation or runtime failure.
        - **Security Vulnerabilities**: Possible security flaws such as SQL injection, command injection, hardcoded secrets, weak encryption, or improper input validation.
        - **Logical Errors**: Flaws in the code logic that might lead to incorrect results, unintended behavior, or unexpected crashes.
        - **Performance Issues**: Inefficient loops, redundant operations, memory leaks, or excessive resource consumption.
        - **Best Practices Violations**: Code that does not follow standard conventions, poor exception handling, or missing important comments/documentation.
        - **Concurrency and Thread Safety Issues**: Potential race conditions, deadlocks, or improper handling of asynchronous code.

        **Instructions:**
        - Review the Git diffs carefully and check how they modify the existing code.
        - Compare the changes against the full source code to determine their impact.
        - Identify any issues that could arise from the new changes.
        - Do **not** add introductory or concluding statements.
        - Provide your findings in the following strict format:  
          ```
          line_number : [Type of Issue] Description of the issue and potential consequences.
          ```
          **Example output:**
          ```
          23 : [Security] SQL query is vulnerable to injection due to missing parameterized queries.
          45 : [Logic] Division by zero possible when variable `x` is zero.
          78 : [Performance] Unnecessary nested loop increases time complexity to O(n^2).
          ```

        If no issues are found, respond with exactly: "{no_response}".

        **Git Diffs:**
        ```
        {diffs}
        ```

        **Full Code:**
        ```
        {code}
        ```
    """


    @abstractmethod
    def ai_request_diffs(self, code, diffs) -> str:
        pass

    @staticmethod
    def build_ask_text(code, diffs) -> str:
        return AiBot.__chat_gpt_ask_long.format(
            problems = AiBot.__problems,
            no_response = AiBot.__no_response,
            diffs = diffs,
            code = code,
        )

    @staticmethod
    def is_no_issues_text(source: str) -> bool:
        target = AiBot.__no_response.replace(" ", "")
        source_no_spaces = source.replace(" ", "")
        return source_no_spaces.startswith(target)
    
    @staticmethod
    def split_ai_response(input) -> list[LineComment]:
        if input is None or not input:
            return []
        
        lines = input.strip().split("\n")
        models = []

        for full_text in lines:
            number_str = ''
            number = 0
            full_text = full_text.strip()
            if len( full_text ) == 0:
                continue

            reading_number = True
            for char in full_text.strip():
                if reading_number:
                    if char.isdigit():
                        number_str += char
                    else:
                        break

            if number_str:
                number = int(number_str)

            models.append(LineComment(line = number, text = full_text))
        return models
    

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/ai/ai_bot.py b/.ai/io/nerdythings/ai/ai_bot.py
index 09ab824..9f8f08c 100644
--- a/.ai/io/nerdythings/ai/ai_bot.py
+++ b/.ai/io/nerdythings/ai/ai_bot.py
@@ -7,44 +7,19 @@ class AiBot(ABC):
     
     __no_response = "No critical issues found"
     __problems="errors, issues, potential crashes or unhandled exceptions"
-    __chat_gpt_ask_long = """
-        You are an AI code reviewer. Your task is to analyze the provided code changes (Git diffs) and full source code of a file, then identify **all potential issues** including but not limited to:
-        - **Syntax Errors**: Any incorrect syntax that would cause compilation or runtime failure.
-        - **Security Vulnerabilities**: Possible security flaws such as SQL injection, command injection, hardcoded secrets, weak encryption, or improper input validation.
-        - **Logical Errors**: Flaws in the code logic that might lead to incorrect results, unintended behavior, or unexpected crashes.
-        - **Performance Issues**: Inefficient loops, redundant operations, memory leaks, or excessive resource consumption.
-        - **Best Practices Violations**: Code that does not follow standard conventions, poor exception handling, or missing important comments/documentation.
-        - **Concurrency and Thread Safety Issues**: Potential race conditions, deadlocks, or improper handling of asynchronous code.
+    __chat_gpt_ask_long="""
+Could you describe briefly {problems} for the next code with given git diffs? 
+Please, also, do not add intro words, just print errors in the format: "line_number : cause effect"
+If there are no {problems} just say "{no_response}".
 
-        **Instructions:**
-        - Review the Git diffs carefully and check how they modify the existing code.
-        - Compare the changes against the full source code to determine their impact.
-        - Identify any issues that could arise from the new changes.
-        - Do **not** add introductory or concluding statements.
-        - Provide your findings in the following strict format:  
-          ```
-          line_number : [Type of Issue] Description of the issue and potential consequences.
-          ```
-          **Example output:**
-          ```
-          23 : [Security] SQL query is vulnerable to injection due to missing parameterized queries.
-          45 : [Logic] Division by zero possible when variable `x` is zero.
-          78 : [Performance] Unnecessary nested loop increases time complexity to O(n^2).
-          ```
+DIFFS:
 
-        If no issues are found, respond with exactly: "{no_response}".
+{diffs}
 
-        **Git Diffs:**
-        ```
-        {diffs}
-        ```
-
-        **Full Code:**
-        ```
-        {code}
-        ```
-    """
+Full code from the file:
 
+{code}
+"""
 
     @abstractmethod
     def ai_request_diffs(self, code, diffs) -> str:


----------------------------------------------------------------------

`` `
 29  :  [ Logic ]  The  variable  ` problems `  is  defined  in  the  class  but  not  used  within  the  ` __ chat _g pt _ask _long `  string .
 41  :  [ Security ]  The  message  string  in  ` __ chat _g pt _ask _long `  potentially  exposes  sensitive  information  about  potential  crashes  or  un handled  exceptions .
 55  :  [ Logic ]  Incorrect  string  interpolation  with  ` problems `  in  ` __ chat _g pt _ask _long `.
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from log import Log
from dotenv import load_dotenv
load_dotenv()

class EnvVars:
    def __init__(self):
        self.owner = os.getenv('REPO_OWNER')
        self.repo = os.getenv('REPO_NAME')
        self.pull_number = os.getenv('PULL_NUMBER')
        
        self.token = os.getenv('GITHUB_TOKEN') 

        self.base_ref = os.getenv('GITHUB_BASE_REF') 
        self.head_ref = os.getenv('GITHUB_HEAD_REF') 

        self.chat_gpt_token = os.getenv('CHATGPT_KEY') 
        self.chat_gpt_model = os.getenv('CHATGPT_MODEL') 

        self.target_extensions = os.getenv('TARGET_EXTENSIONS')
        self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]

        if len(self.target_extensions) == 0:
            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")

        self.env_vars = {
            "owner" : self.owner,
            "repo" : self.repo,
            "token" : self.token,
            "base_ref" : self.base_ref,
            "pull_number" : self.pull_number,
            "chat_gpt_token" : self.chat_gpt_token,
            "chat_gpt_model" : self.chat_gpt_model,
        }

    def check_vars(self):
        missing_vars = [var for var, value in self.env_vars.items() if not value]
        if missing_vars:
            missing_vars_str = ", ".join(missing_vars)
            raise ValueError(f"The following environment variables are missing or empty: {missing_vars_str}")
        else:
            Log.print_green("All required environment variables are set.")
        

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/env_vars.py b/.ai/io/nerdythings/env_vars.py
index d22b9cc..e6125ae 100644
--- a/.ai/io/nerdythings/env_vars.py
+++ b/.ai/io/nerdythings/env_vars.py
@@ -1,10 +1,15 @@
-
-
 import os
 from log import Log
 from dotenv import load_dotenv
+
 load_dotenv()
 
+
+# In thử giá trị
+print("GITHUB_TOKEN:", os.getenv("GITHUB_TOKEN"))
+print("CHATGPT_KEY:", os.getenv("CHATGPT_KEY"))
+print("CHATGPT_MODEL:", os.getenv("CHATGPT_MODEL"))
+
 class EnvVars:
     def __init__(self):
         self.owner = os.getenv('REPO_OWNER')
@@ -23,7 +28,8 @@ class EnvVars:
         self.target_extensions = [lang.strip() for lang in self.target_extensions.split(",")]
 
         if len(self.target_extensions) == 0:
-            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: kt,java,py,js,swift,c,h. Only these files will be reviewed")
+            raise ValueError(f"Please specify TARGET_EXTENSIONS. Coma separated, could be, like: ts,java,py,js,c. Only these files will be reviewed")
+      
 
         self.env_vars = {
             "owner" : self.owner,


----------------------------------------------------------------------

`` `
 23  :  [ Logic ]  The  typo  in  the  error  message  " Com a "  should  be  corrected  to  " Com ma ".
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------


import subprocess
from typing import List
from log import Log

class Git:

    @staticmethod
    def __run_subprocess(options):
        Log.print_green(options)
        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
        if result.returncode == 0:
            return result.stdout
        else:
            Log.print_red(options)
            raise Exception(f"Error running {options}: {result.stderr}")

    @staticmethod
    def get_remote_name() -> str:
        command = ["git", "remote", "-v"]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0]

    @staticmethod
    def get_last_commit_sha(file) -> str:
        command = ["git", "log", "-1", "--format=\"%H\"", "--", file]
        result = Git.__run_subprocess(command)
        lines = result.strip().splitlines()
        return lines[0].split()[0].replace('"', "")
        
    @staticmethod
    def get_diff_files(remote_name, head_ref, base_ref) -> List[str]:
        command = ["git", "diff", "--name-only", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}"]
        result = Git.__run_subprocess(command)
        return result.strip().splitlines()
        
    @staticmethod
    def get_diff_in_file(remote_name, head_ref, base_ref, file_path) -> str:
        command = ["git", "diff", f"{remote_name}/{base_ref}", f"{remote_name}/{head_ref}", "--", file_path]
        return Git.__run_subprocess(command)


----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/git.py b/.ai/io/nerdythings/git.py
index 0a6bbcb..c92680d 100644
--- a/.ai/io/nerdythings/git.py
+++ b/.ai/io/nerdythings/git.py
@@ -8,7 +8,7 @@ class Git:
     @staticmethod
     def __run_subprocess(options):
         Log.print_green(options)
-        result = subprocess.run(options, stdout=subprocess.PIPE, text=True)
+        result = subprocess.run(options, stdout=subprocess.PIPE, text=True, encoding="utf-8")
         if result.returncode == 0:
             return result.stdout
         else:


----------------------------------------------------------------------

`` `
 8  :  [ Performance ]  The  encoding  parameter  " utf - 8 "  is  redundant  in  the  subprocess .run ()  call  and  can  be  removed .
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------



import os
from git import Git 
from pathlib import Path
from ai.chat_gpt import ChatGPT
from ai.ai_bot import AiBot
from log import Log
from env_vars import EnvVars
from repository.github import GitHub
from repository.repository import RepositoryError

separator = "\n\n----------------------------------------------------------------------\n\n"
log_file = open('output.txt', 'a')

def main():
    vars = EnvVars()
    vars.check_vars()

    ai = ChatGPT(vars.chat_gpt_token, vars.chat_gpt_model)
    github = GitHub(vars.token, vars.owner, vars.repo, vars.pull_number)

    remote_name = Git.get_remote_name()
    
    Log.print_green("Remote is", remote_name)
    changed_files = Git.get_diff_files(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref)
    Log.print_green("Found changes in files", changed_files)
    if len(changed_files) == 0: 
        Log.print_red("No changes between branch")

    for file in changed_files:
        Log.print_green("Checking file", file)

        _, file_extension = os.path.splitext(file)
        file_extension = file_extension.lstrip('.')
        if file_extension not in vars.target_extensions:
            Log.print_yellow(f"Skipping, unsuported extension {file_extension} file {file}")
            continue

        try:
            with open(file, 'r') as file_opened:
                file_content = file_opened.read()
        except FileNotFoundError:
            Log.print_yellow("File was removed. Continue.", file)
            continue

        if len( file_content ) == 0: 
            Log.print_red("File is empty")
            continue

        file_diffs = Git.get_diff_in_file(remote_name=remote_name, head_ref=vars.head_ref, base_ref=vars.base_ref, file_path=file)
        if len( file_diffs ) == 0: 
            Log.print_red("Diffs are empty")
        
        Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
        response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)

        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")

        if AiBot.is_no_issues_text(response):
            Log.print_green("File looks good. Continue", file)
        else:
            responses = AiBot.split_ai_response(response)
            if len(responses) == 0:
                Log.print_red("Responses where not parsed:", responses)

            result = False
            for response in responses:
                if response.line:
                    result = post_line_comment(github=github, file=file, text=response.text, line=response.line)
                if not result:
                    result = post_general_comment(github=github, file=file, text=response.text)
                if not result:
                    raise RepositoryError("Failed to post any comments.")
                    
def post_line_comment(github: GitHub, file: str, text:str, line: int):
    Log.print_green("Posting line", file, line, text)
    try:
        git_response = github.post_comment_to_line(
            text=text, 
            commit_id=Git.get_last_commit_sha(file=file), 
            file_path=file, 
            line=line,
        )
        Log.print_yellow("Posted", git_response)
        return True
    except RepositoryError as e:
        Log.print_red("Failed line comment", e)
        return False

def post_general_comment(github: GitHub, file: str, text:str) -> bool:
    Log.print_green("Posting general", file, text)
    try:
        message = f"{file}\n{text}"
        git_response = github.post_comment_general(message)
        Log.print_yellow("Posted general", git_response)
        return True
    except RepositoryError:
        Log.print_red("Failed general comment")
        return False

if __name__ == "__main__":
    main()

log_file.close()

----------------------------------------------------------------------

diff --git a/.ai/io/nerdythings/github_reviewer.py b/.ai/io/nerdythings/github_reviewer.py
index 87142b6..0e6d288 100644
--- a/.ai/io/nerdythings/github_reviewer.py
+++ b/.ai/io/nerdythings/github_reviewer.py
@@ -55,7 +55,9 @@ def main():
         Log.print_green(f"Asking AI. Content Len:{len(file_content)} Diff Len: {len(file_diffs)}")
         response = ai.ai_request_diffs(code=file_content, diffs=file_diffs)
 
-        log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+        with open("log.txt", "w", encoding="utf-8") as log_file:
+            log_file.write(f"{separator}{file_content}{separator}{file_diffs}{separator}{response}{separator}")
+
 
         if AiBot.is_no_issues_text(response):
             Log.print_green("File looks good. Continue", file)


----------------------------------------------------------------------

`` `
 No  critical  issues  found 
 ```

----------------------------------------------------------------------



----------------------------------------------------------------------

from fastapi import FastAPI
from pydantic import BaseModel
from transformers import T5Tokenizer, T5ForConditionalGeneration
from fastapi.middleware.cors import CORSMiddleware
import re

# Init app
app = FastAPI(title='Text Summarization System', description="Summarize dialogues with T5", version="1.0")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load model and tokenizer on CPU
model = T5ForConditionalGeneration.from_pretrained("phuckhang1908/T5_summary")
tokenizer = T5Tokenizer.from_pretrained("phuckhang1908/T5_summary")
model = model.to("cpu")

# Input schema for requests
class DialogueInput(BaseModel):
    dialogue: str

# Clean text function
def clean_text(text: str) -> str:
    text = re.sub(r'\r\n|\n', '\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'<.*?>', '', text)
    text = '\n'.join([line.strip() for line in text.split('\n') if line.strip()])
    return text.lower()

# Summarization function
def summarize_dialogue(dialogue: str) -> str:
    dialogue = clean_text(dialogue)
    inputs = tokenizer(dialogue, return_tensors="pt", truncation=True, padding="max_length", max_length=512)

    # Generate summary on CPU
    outputs = model.generate(
        inputs["input_ids"],
        max_length=150,
        num_beams=4,
        early_stopping=True
    )
    summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return summary

# API endpoint for text summarization
@app.post('/summarize/')
async def summarize(dialogue_input: DialogueInput):
    summary = summarize_dialogue(dialogue_input.dialogue)
    return {'summary': summary}


----------------------------------------------------------------------

diff --git a/app.py b/app.py
index cbbc04c..679188c 100644
--- a/app.py
+++ b/app.py
@@ -49,6 +49,6 @@ def summarize_dialogue(dialogue: str) -> str:
 
 # API endpoint for text summarization
 @app.post('/summarize/')
-async def summarize(dialogue_input: DialogueInput):
+def summarize(dialogue_input: DialogueInput):
     summary = summarize_dialogue(dialogue_input.dialogue)
-    return {'summary': summary}
+    return {'summary-text': summary}


----------------------------------------------------------------------

`` `
 No  critical  issues  found 
 ```

----------------------------------------------------------------------

